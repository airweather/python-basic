# class

# class 클래스 이름:
    # 초기자 정의
    # 메소드 정의

# 메소드
# 객체에 대한 행동(연산)을 정의
# 함수의 정의 및 사용 방법과 동일

# class 클래스 이름:
    # def 메소드 이름(self, 매개변수 리스트)
        # 코드 블럭

# self 매개변수
# 모든 메소드의 첫번째 매개변수
# 메소드의 구현에 사용되지만 메소드 호출 시 사용되지 않음
# 객체 자신을 참조하여 클래스 정의에 포함된 맴버에 접근 시 사용

# 초기자(initializer)
# 객체의 상태를 초기화하는 특수 메소드
# 항상 __init__ 으로 명명

# 객채와 인스턴스

# 구문형식
# 클래스 이름 (초기자 파라미터)
# 클래스의 생성자(constructor)를 통해 클래스의 인스턴스 생성
# 객체와 인스턴스는 동일 개념
# 클래스의 생성자는 클래스의 이름과 동일
# 클래스의 이름과 초기자의 매개변수를 사용하여 생성자를 호출

# 객채의 사용
# 객체의 데이터 필드 접근 및 메소드 호출
# 객체 맴버 접근 연산자(.) 사용

# 객체 접근
# 객체 참조변수.데이터 필드
# 객체 참조변수.메소드(파라미터)

# 객체 참조변수를 사용하여 객체를 생성
# 객체 참조변수 = 클래스 이름(초기자 파라미터)

# 실제 모든 변수는 객체이다
# 객체 맴버 접근 연산자로 접근 가능
# "Korea".lower()

# 데이터 필드 감추기
# 데이터 은닉(data hiding)
# 데이터 필드의 직접 변경을 방지하기 위해 사용자의 직접적 접근을 차단
# public과 다른 private 데이터 필드로 정의

# private 데이터 필드
# 클래스 내부에서만 접근 가능
# 앞 두 밑줄(__)로 정의
# self.__r, self.__h

# private 데이터 필드에 접근하는 메소드
# 접근자(accessor) : 데이터 필드 반환
# 변경자(mutator) : 데이터 필드 설정